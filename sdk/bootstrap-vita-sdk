#!/usr/bin/env bash
__dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
__file="${__dir}/$(basename "${BASH_SOURCE[0]}")"
__executed=$(($(return 2>/dev/null)$?))
__prefix="(✜\[\e[1m\] ⴰ\[\e[0m\]\[\e[7m\]    \[\e[0m\]\[\e[1m\]ⴰ✤\[\e[0m\])"
__prefix_formatted="${__prefix@P}"
__log() { echo -e "$__prefix_formatted $@"; }

VITASDK_PLATFORM_SUFFIX='.env'
VITA3K_ZIP_URL='https://github.com/Vita3K/Vita3K/releases/download/continuous/ubuntu-latest.zip'

case "${1,,}" in
    native|vita) export VITASDK_PLATFORM='native';;
    *3k|emulat*) export VITASDK_PLATFORM='Vita3K';;
    clean) 
        envs=( $(find "$__dir" -type d -name "*$VITASDK_PLATFORM_SUFFIX") )
        envcount=${#envs[@]}
        for env in ${envs[@]}; do
            filecount=$(rm -rfv "$env" | grep -v directory | wc -l)
        done
        __log "Removed $envcount SDK environment$( ((envcount==1))||echo 's')" \
              "(${filecount:-0} files)."
        ((__executed)) && exit 1 || return 1
        ;;
    *)
        __log 'Target platform needed, provide either "native" or "3k" as an argument.'>&2
        __log 'Alternatively specify "clean" to remove all existing vita SDK environments.'>&2
       ((__executed)) && exit 1 || return 1
       ;;
esac

if ((__executed)); then
  __log 'Spawning environment in child shell.'
  source_file_regex='^\++ +(builtin )?((source)|(\.)) '
  export __bash_startup_files="$($BASH -lixc exit 2>&1 |
                                 grep -E "$source_file_regex" |
                                 sed -E "s/${source_file_regex}//g")"
  __bash_source_startups() { for f in $__bash_startup_files
                             do [ -f $f ] && builtin source $f 2>/dev/null
                             done }
  export -f __bash_source_startups
  exec bash --init-file <(echo "__bash_source_startups ; source $__file $@")
  exit 0
fi

export VITASDK=${VITASDK:-"$__dir/${VITASDK_PLATFORM}${VITASDK_PLATFORM_SUFFIX}"}
export VITASDKBIN="$VITASDK/bin"
[[ "$PATH" =~ $VITASDKBIN ]] || export PATH="$VITASDKBIN:$PATH"

[[ "${VITASDK_PLATFORM:?}" == 'Vita3K' ]] && declare PLATFORM_IS_3K=1

if [ -v PLATFORM_IS_3K ]; then
    __prefix="(✜\[\e[1m\] ⴰ\[\e[0m\]\[\e[1;7m\] 3K \[\e[0m\]\[\e[1m\]ⴰ✤\[\e[0m\])"
    export VITA3K_DIR="$VITASDK/Vita3K"
    [[ "$PATH" =~ $VITA3K_DIR ]] || export PATH="$VITA3K_DIR:$PATH"
else
    __prefix="(✜\[\e[1m\] ⴰ\[\e[0m\]\[\e[1;7m\]vita\[\e[0m\]\[\e[1m\]ⴰ✤\[\e[0m\])"
fi
__prefix_formatted="${__prefix@P}"

export PS1="$__prefix "


vita-serve() {
  local ip=$(ip -o addr show up primary scope global |
             head -1 |
             cut -d' ' -f 7-7 |
             grep -oP '\d+\.\d+\.\d+\.\d+')
  local url="http://$ip:8000${1:+/$1}"
  echo $url
  python3 -m http.server &>/dev/null &
  httppid=$!
  qrterminal $url | less -R
  kill $httppid
  wait
}


vita-ftp() {
  # local host="${2:?hostname or IP required}" dest="${3:-download/}"
  # curl -T "$1" "ftp://${host}:1337/ux0:${dest}"
  curl -T "$1" "ftp://192.168.0.13:1337/ux0:download/"
}

if ! [ -d "$VITASDK" ]; then
    set -o errexit
    (
        set -o errexit -o nounset

        stream-window-of-lines() {
            local lines=()
            local linecount=${1:-10}
            local linesofar=0
            local lineidx=0
            local header=''

            for ((i=0;i<linecount;i++)); do lines[$i]=' '; done

            _nonring_printlines() {
                if ((linesofar>linecount)); then
                    printlines=_ring_printlines
                    _ring_printlines
                else
                    echo -e '\e[1F\e[0J'
                    for ((i=0;i<lineidx;i++)); do echo "${lines[i]}"; done
                    for ((i=lineidx;i<linecount;i++)); do echo "${lines[i]}"; done
                fi
            }

            _ring_printlines() {
                for ((i=lineidx;i<linecount;i++)); do echo "${lines[i]}"; done
                for ((i=0;i<lineidx;i++)); do echo "${lines[i]}"; done
            }

            local printlines=_nonring_printlines

            addline() {
                lines[$lineidx]="$@"
                ((++lineidx >= linecount)) && lineidx=0
                ((++linesofar))
                local lineheight=0 newlines=0
                local width=$(tput cols)
                for ((i=0;i<linecount;i++)); do
                    newlines=$((${#lines[i]}/(width+1) + 1))
                    ((lineheight += newlines ))
                done

                local header=" ... $linesofar lines of output ..."
                ((lineheight += $((${#header}/(width+1) + 1)) ))

                echo -ne '\e[0J'
                echo -e "\e[1m$header\e[0m"
                $printlines
                echo -ne "\e[${lineheight}F"
            }

            while read line; do addline "$line"; done

            echo -e "\e[1m$header\e[0m"
            echo -ne '\e[0J'
        }


        __error_cleanup() {
            __log "\e[31mAn error occurred while installing vita SDK in $VITASDK\e[0m"
            __log "$VITASDK will be deleted as it is in an undefined state."
            __log "Please re-run the installer command."
            command rm -rf "$VITASDK" &>/dev/null
            exit 1
        }
        trap __error_cleanup EXIT


        ### vita SDK via vdpm
        __log "\e[36mBootstrapping vita SDK in $VITASDK\e[0m"
        sleep 1
        SDKTMP="$(mktemp -d)"
        trap "rm -rf $SDKTMP&>/dev/null ; __error_cleanup" EXIT
        git clone --quiet --recursive --depth=1 https://github.com/vitasdk/vdpm "$SDKTMP"
        pushd "$SDKTMP" > /dev/null
        ./bootstrap-vitasdk.sh |&  stream-window-of-lines
        rm /tmp/vdpm_install_* &>/dev/null ||:    # ignore vdpm update cache
        __log "\e[36mInstalling vita SDK modules\e[0m"
        ./install-all.sh 2>/dev/null |  stream-window-of-lines
        rm /tmp/vdpm_install_* &>/dev/null ||:    # clear vdpm update cache
        trap '' EXIT
        __log 'vita SDK initialized, cleaning up'
        popd > /dev/null
        rm -rf "$SDKTMP" &>/dev/null


        ### vitaShaRK
        __log '\e[36mBuilding vitaShaRK\e[0m'
        cd "$VITASDK"
        git clone --quiet https://github.com/Rinnegatamante/vitaShaRK
        pushd vitaShaRK > /dev/null
        if [ -v PLATFORM_IS_3K ]; then
            target_macro='#define DISABLE_SHACCCG_EXTENSIONS'
            __log 'Disabling shacccg extensions for Vita3K build target'
            sed -i'' "s@^//${target_macro}@${target_macro}@" -- source/vitashark.c
        fi
        make && make install 
        popd > /dev/null
        __log 'vitaShaRK installed, cleaning up'
        command rm -rf vitaShaRK


        ### vitaGL
        __log '\e[36mBuilding vitaGL\e[0m'
        cd "$VITASDK"
        git clone --quiet https://github.com/Rinnegatamante/vitaGL
        pushd vitaGL > /dev/null
        make clean &>/dev/null
        if [ -v PLATFORM_IS_3K ]; then
            export HAVE_VITA3K_SUPPORT=1
            __log 'Compiling vitaGL with Vita3K support...'
        fi
        # export HAVE_GLSL_SUPPORT=1
        make |&  stream-window-of-lines 5
        make install
        popd > /dev/null
        __log 'vitaGL installed, cleaning up'
        command rm -rf vitaGL


        ### Install Vita3K if that's the target platform
        if [ -v PLATFORM_IS_3K ]; then
            __log "\e[36mInstalling the Vita3K emulator to ${VITA3K_DIR:?}\e[0m"
            mkdir "$VITA3K_DIR" && cd "$VITA3K_DIR"
            curl -L# $VITA3K_ZIP_URL -o vita3k.zip
            unzip -q -o -a vita3k.zip
            rm vita3k.zip
            chmod +x ./Vita3K
            VITA3K_SHACCCG_DIR="$VITA3K_DIR/config/ur0/data/external"
            VITA3K_SHACCCG_URL='https://github.com/AnimMouse/SceShaccCg/raw/main/libshacccg.suprx'
            mkdir -p "$VITA3K_SHACCCG_DIR"
            curl -sL $VITA3K_SHACCCG_URL -o "$VITA3K_SHACCCG_DIR/libshacccg.suprx"
            echo "pref-path: $VITA3K_DIR/config/" >> config.yml
            echo "discord-rich-presence: false"   >> config.yml
            echo "user-id: 00"                    >> config.yml
            echo "user-auto-connect: true"        >> config.yml
            echo "show-welcome: false"            >> config.yml
            mkdir -p config/ux0/user/00
            echo '<?xml version="1.0" encoding="utf-8"?><user id="00" name="User1"><avatar>default</avatar><sort-apps-list type="4" state="1" /><theme use-background="true"><content-id>default</content-id></theme><start-screen type="default"><path></path></start-screen><backgrounds /></user>' >> config/ux0/user/00/user.xml
            __log "\e[33mVita3K emulator installed in $VITA3K_DIR, run \`\e[1mVita3K\e[22m\` to launch.\e[0m"
        fi


        ### Environment ready
        __log "\e[32mvita SDK environment for $VITASDK_PLATFORM builds created in $VITASDK\e[0m"
        trap '' EXIT
    )
    set +o errexit
fi