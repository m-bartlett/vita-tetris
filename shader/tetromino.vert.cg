uniform float4x4 ModelMatrix;
uniform float4x4 NormalMatrix;
uniform float4x4 ViewMatrix;
uniform float4x4 ProjectionMatrix;
uniform float3   LightPosition;
uniform float3   FaceTypeNormals[5];

struct fragment_t {
    float2 texcoord;
    unsigned char block_type;
    float diffusion;
};

void main(
    float3 position,
    float2 texcoord,
    unsigned char2 type,
    float4 out gl_Position : POSITION,
    fragment_t out fragment : TEXCOORD0
) {
    unsigned char block_type = type[0];
    unsigned char face_type = type[1];

    float4 mvPosition = mul(mul(float4(position, 1.0f), ModelMatrix), ViewMatrix);

    // Undo translation for normal rotation calculation
    ModelMatrix[3][0] = 0; ModelMatrix[3][1] = 0; ModelMatrix[3][2] = 0;

    float3 normal = normalize(FaceTypeNormals[face_type]);
    normal = normalize(mul(float4(normal,1), ModelMatrix).xyz);

    float3 light = normalize(LightPosition);
    float diffusion = dot(normal, light);

    texcoord /= 3.0;  // normalize block coordinates

    fragment = fragment_t(texcoord, block_type, diffusion);
    gl_Position = mul(mvPosition, ProjectionMatrix);
}