uniform float4x4 ModelMatrix;
uniform float4x4 ViewMatrix;
uniform float4x4 ProjectionMatrix;
uniform float3   LightPosition;
uniform float3   FaceTypeNormals[5];

struct fragment_t {
    float2 texcoord;
    unsigned char block_type;
    float diffusion;
};

void main(
    float3 position,
    float2 texcoord,
    unsigned char2 type,
    float4 out gl_Position : POSITION,
    fragment_t out fragment : TEXCOORD0
) {
    unsigned char block_type = type[0];
    unsigned char face_type = type[1];

    float4x4 ModelViewMatrix = mul(ModelMatrix,ViewMatrix);
    float4 mvPosition = mul(float4(position, 1.0f), ModelViewMatrix);

    float3 normal = normalize(FaceTypeNormals[face_type]);
    normal = normalize(mul(float4(normal,1), transpose(ModelViewMatrix)).xyz);

    LightPosition.z = -LightPosition.z;
    float diffusion = abs(dot(normal, normalize(LightPosition)));

    fragment = fragment_t(texcoord, block_type, diffusion);
    gl_Position = mul(mvPosition, ProjectionMatrix);

}