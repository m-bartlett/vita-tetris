uniform float4x4 ModelMatrix;
uniform float4x4 ProjectionMatrix;
uniform float4x4 NormalMatrix;
uniform float3 LightSourcePosition;

struct fragment_t {
    float2 texcoord;
    unsigned char block_type;
    float diffusion;
};

void main(
    float3 position,
    float2 texcoord,
    unsigned char2 type,
    float4 out gl_Position : POSITION,
    fragment_t out fragment : TEXCOORD0
) {
    unsigned char block_type = type.x;
    unsigned char face_type = type.y;

    float4 mvPosition = mul(float4(position, 1.0f), ModelMatrix);

    float3 normal;
         if (face_type == 1) normal = float3(0,1,0);  // top
    else if (face_type == 2) normal = float3(1,0,0);  // right
    else if (face_type == 3) normal = float3(0,-1,0); // bottom
    else if (face_type == 4) normal = float3(-1,0,0); // left
    else                     normal = float3(0,0,1); // front

    // normal = float3(texcoord.x, texcoord.y, position.z);

    // normal *= mvosition;
    normal = normalize(mul(float4(normal,1), ModelMatrix).xyz);
    normal = normalize(mul(float4(normal,1), NormalMatrix).xyz);

    float3 N = normal;
    // float3 L = normalize(-LightSourcePosition);
    // float3 L = normalize(mul(float4(-LightSourcePosition,1), ModelMatrix).xyz);
    float3 L = normalize(LightSourcePosition-mvPosition);


    float diffusion = dot(N, L);

    fragment = fragment_t(texcoord, block_type, diffusion);

    gl_Position = mul(mvPosition, ProjectionMatrix);
}